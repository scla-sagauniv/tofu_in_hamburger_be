// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/ingredientRain/v1/ingredientRain.proto

package ingredientRainv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "tofu_in_hamburger_be/gen/rpc/ingredientRain/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IngredientServiceName is the fully-qualified name of the IngredientService service.
	IngredientServiceName = "rpc.ingredientRain.v1.IngredientService"
	// RecipeServiceName is the fully-qualified name of the RecipeService service.
	RecipeServiceName = "rpc.ingredientRain.v1.RecipeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IngredientServiceStreamIngredientProcedure is the fully-qualified name of the IngredientService's
	// StreamIngredient RPC.
	IngredientServiceStreamIngredientProcedure = "/rpc.ingredientRain.v1.IngredientService/StreamIngredient"
	// IngredientServiceGetIngredientListProcedure is the fully-qualified name of the
	// IngredientService's GetIngredientList RPC.
	IngredientServiceGetIngredientListProcedure = "/rpc.ingredientRain.v1.IngredientService/GetIngredientList"
	// IngredientServiceSendIngredientsProcedure is the fully-qualified name of the IngredientService's
	// SendIngredients RPC.
	IngredientServiceSendIngredientsProcedure = "/rpc.ingredientRain.v1.IngredientService/SendIngredients"
	// IngredientServiceCreateIngredientProcedure is the fully-qualified name of the IngredientService's
	// CreateIngredient RPC.
	IngredientServiceCreateIngredientProcedure = "/rpc.ingredientRain.v1.IngredientService/CreateIngredient"
	// IngredientServiceUpdateIngredientProcedure is the fully-qualified name of the IngredientService's
	// UpdateIngredient RPC.
	IngredientServiceUpdateIngredientProcedure = "/rpc.ingredientRain.v1.IngredientService/UpdateIngredient"
	// IngredientServiceDeleteIngredientProcedure is the fully-qualified name of the IngredientService's
	// DeleteIngredient RPC.
	IngredientServiceDeleteIngredientProcedure = "/rpc.ingredientRain.v1.IngredientService/DeleteIngredient"
	// RecipeServiceGetRecipeListProcedure is the fully-qualified name of the RecipeService's
	// GetRecipeList RPC.
	RecipeServiceGetRecipeListProcedure = "/rpc.ingredientRain.v1.RecipeService/GetRecipeList"
	// RecipeServiceSearchRecipesByIngredientsProcedure is the fully-qualified name of the
	// RecipeService's SearchRecipesByIngredients RPC.
	RecipeServiceSearchRecipesByIngredientsProcedure = "/rpc.ingredientRain.v1.RecipeService/SearchRecipesByIngredients"
	// RecipeServiceCreateRecipesByBatchProcedure is the fully-qualified name of the RecipeService's
	// CreateRecipesByBatch RPC.
	RecipeServiceCreateRecipesByBatchProcedure = "/rpc.ingredientRain.v1.RecipeService/CreateRecipesByBatch"
	// RecipeServiceUpdateRecipeProcedure is the fully-qualified name of the RecipeService's
	// UpdateRecipe RPC.
	RecipeServiceUpdateRecipeProcedure = "/rpc.ingredientRain.v1.RecipeService/UpdateRecipe"
	// RecipeServiceDeleteRecipeProcedure is the fully-qualified name of the RecipeService's
	// DeleteRecipe RPC.
	RecipeServiceDeleteRecipeProcedure = "/rpc.ingredientRain.v1.RecipeService/DeleteRecipe"
)

// IngredientServiceClient is a client for the rpc.ingredientRain.v1.IngredientService service.
type IngredientServiceClient interface {
	StreamIngredient(context.Context, *connect_go.Request[v1.StreamIngredientRequest]) (*connect_go.ServerStreamForClient[v1.StreamIngredientResponse], error)
	GetIngredientList(context.Context, *connect_go.Request[v1.GetIngredientListRequest]) (*connect_go.Response[v1.GetIngredientListResponse], error)
	SendIngredients(context.Context, *connect_go.Request[v1.SendIngredientsRequst]) (*connect_go.Response[v1.SendIngredientsResponse], error)
	CreateIngredient(context.Context, *connect_go.Request[v1.CreateIngredientRequest]) (*connect_go.Response[v1.CreateIngredientResponse], error)
	UpdateIngredient(context.Context, *connect_go.Request[v1.UpdateIngredientRequest]) (*connect_go.Response[v1.UpdateIngredientResponse], error)
	DeleteIngredient(context.Context, *connect_go.Request[v1.DeleteIngredientRequest]) (*connect_go.Response[v1.DeleteIngredientResponse], error)
}

// NewIngredientServiceClient constructs a client for the rpc.ingredientRain.v1.IngredientService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIngredientServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IngredientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ingredientServiceClient{
		streamIngredient: connect_go.NewClient[v1.StreamIngredientRequest, v1.StreamIngredientResponse](
			httpClient,
			baseURL+IngredientServiceStreamIngredientProcedure,
			opts...,
		),
		getIngredientList: connect_go.NewClient[v1.GetIngredientListRequest, v1.GetIngredientListResponse](
			httpClient,
			baseURL+IngredientServiceGetIngredientListProcedure,
			opts...,
		),
		sendIngredients: connect_go.NewClient[v1.SendIngredientsRequst, v1.SendIngredientsResponse](
			httpClient,
			baseURL+IngredientServiceSendIngredientsProcedure,
			opts...,
		),
		createIngredient: connect_go.NewClient[v1.CreateIngredientRequest, v1.CreateIngredientResponse](
			httpClient,
			baseURL+IngredientServiceCreateIngredientProcedure,
			opts...,
		),
		updateIngredient: connect_go.NewClient[v1.UpdateIngredientRequest, v1.UpdateIngredientResponse](
			httpClient,
			baseURL+IngredientServiceUpdateIngredientProcedure,
			opts...,
		),
		deleteIngredient: connect_go.NewClient[v1.DeleteIngredientRequest, v1.DeleteIngredientResponse](
			httpClient,
			baseURL+IngredientServiceDeleteIngredientProcedure,
			opts...,
		),
	}
}

// ingredientServiceClient implements IngredientServiceClient.
type ingredientServiceClient struct {
	streamIngredient  *connect_go.Client[v1.StreamIngredientRequest, v1.StreamIngredientResponse]
	getIngredientList *connect_go.Client[v1.GetIngredientListRequest, v1.GetIngredientListResponse]
	sendIngredients   *connect_go.Client[v1.SendIngredientsRequst, v1.SendIngredientsResponse]
	createIngredient  *connect_go.Client[v1.CreateIngredientRequest, v1.CreateIngredientResponse]
	updateIngredient  *connect_go.Client[v1.UpdateIngredientRequest, v1.UpdateIngredientResponse]
	deleteIngredient  *connect_go.Client[v1.DeleteIngredientRequest, v1.DeleteIngredientResponse]
}

// StreamIngredient calls rpc.ingredientRain.v1.IngredientService.StreamIngredient.
func (c *ingredientServiceClient) StreamIngredient(ctx context.Context, req *connect_go.Request[v1.StreamIngredientRequest]) (*connect_go.ServerStreamForClient[v1.StreamIngredientResponse], error) {
	return c.streamIngredient.CallServerStream(ctx, req)
}

// GetIngredientList calls rpc.ingredientRain.v1.IngredientService.GetIngredientList.
func (c *ingredientServiceClient) GetIngredientList(ctx context.Context, req *connect_go.Request[v1.GetIngredientListRequest]) (*connect_go.Response[v1.GetIngredientListResponse], error) {
	return c.getIngredientList.CallUnary(ctx, req)
}

// SendIngredients calls rpc.ingredientRain.v1.IngredientService.SendIngredients.
func (c *ingredientServiceClient) SendIngredients(ctx context.Context, req *connect_go.Request[v1.SendIngredientsRequst]) (*connect_go.Response[v1.SendIngredientsResponse], error) {
	return c.sendIngredients.CallUnary(ctx, req)
}

// CreateIngredient calls rpc.ingredientRain.v1.IngredientService.CreateIngredient.
func (c *ingredientServiceClient) CreateIngredient(ctx context.Context, req *connect_go.Request[v1.CreateIngredientRequest]) (*connect_go.Response[v1.CreateIngredientResponse], error) {
	return c.createIngredient.CallUnary(ctx, req)
}

// UpdateIngredient calls rpc.ingredientRain.v1.IngredientService.UpdateIngredient.
func (c *ingredientServiceClient) UpdateIngredient(ctx context.Context, req *connect_go.Request[v1.UpdateIngredientRequest]) (*connect_go.Response[v1.UpdateIngredientResponse], error) {
	return c.updateIngredient.CallUnary(ctx, req)
}

// DeleteIngredient calls rpc.ingredientRain.v1.IngredientService.DeleteIngredient.
func (c *ingredientServiceClient) DeleteIngredient(ctx context.Context, req *connect_go.Request[v1.DeleteIngredientRequest]) (*connect_go.Response[v1.DeleteIngredientResponse], error) {
	return c.deleteIngredient.CallUnary(ctx, req)
}

// IngredientServiceHandler is an implementation of the rpc.ingredientRain.v1.IngredientService
// service.
type IngredientServiceHandler interface {
	StreamIngredient(context.Context, *connect_go.Request[v1.StreamIngredientRequest], *connect_go.ServerStream[v1.StreamIngredientResponse]) error
	GetIngredientList(context.Context, *connect_go.Request[v1.GetIngredientListRequest]) (*connect_go.Response[v1.GetIngredientListResponse], error)
	SendIngredients(context.Context, *connect_go.Request[v1.SendIngredientsRequst]) (*connect_go.Response[v1.SendIngredientsResponse], error)
	CreateIngredient(context.Context, *connect_go.Request[v1.CreateIngredientRequest]) (*connect_go.Response[v1.CreateIngredientResponse], error)
	UpdateIngredient(context.Context, *connect_go.Request[v1.UpdateIngredientRequest]) (*connect_go.Response[v1.UpdateIngredientResponse], error)
	DeleteIngredient(context.Context, *connect_go.Request[v1.DeleteIngredientRequest]) (*connect_go.Response[v1.DeleteIngredientResponse], error)
}

// NewIngredientServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIngredientServiceHandler(svc IngredientServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(IngredientServiceStreamIngredientProcedure, connect_go.NewServerStreamHandler(
		IngredientServiceStreamIngredientProcedure,
		svc.StreamIngredient,
		opts...,
	))
	mux.Handle(IngredientServiceGetIngredientListProcedure, connect_go.NewUnaryHandler(
		IngredientServiceGetIngredientListProcedure,
		svc.GetIngredientList,
		opts...,
	))
	mux.Handle(IngredientServiceSendIngredientsProcedure, connect_go.NewUnaryHandler(
		IngredientServiceSendIngredientsProcedure,
		svc.SendIngredients,
		opts...,
	))
	mux.Handle(IngredientServiceCreateIngredientProcedure, connect_go.NewUnaryHandler(
		IngredientServiceCreateIngredientProcedure,
		svc.CreateIngredient,
		opts...,
	))
	mux.Handle(IngredientServiceUpdateIngredientProcedure, connect_go.NewUnaryHandler(
		IngredientServiceUpdateIngredientProcedure,
		svc.UpdateIngredient,
		opts...,
	))
	mux.Handle(IngredientServiceDeleteIngredientProcedure, connect_go.NewUnaryHandler(
		IngredientServiceDeleteIngredientProcedure,
		svc.DeleteIngredient,
		opts...,
	))
	return "/rpc.ingredientRain.v1.IngredientService/", mux
}

// UnimplementedIngredientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIngredientServiceHandler struct{}

func (UnimplementedIngredientServiceHandler) StreamIngredient(context.Context, *connect_go.Request[v1.StreamIngredientRequest], *connect_go.ServerStream[v1.StreamIngredientResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.IngredientService.StreamIngredient is not implemented"))
}

func (UnimplementedIngredientServiceHandler) GetIngredientList(context.Context, *connect_go.Request[v1.GetIngredientListRequest]) (*connect_go.Response[v1.GetIngredientListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.IngredientService.GetIngredientList is not implemented"))
}

func (UnimplementedIngredientServiceHandler) SendIngredients(context.Context, *connect_go.Request[v1.SendIngredientsRequst]) (*connect_go.Response[v1.SendIngredientsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.IngredientService.SendIngredients is not implemented"))
}

func (UnimplementedIngredientServiceHandler) CreateIngredient(context.Context, *connect_go.Request[v1.CreateIngredientRequest]) (*connect_go.Response[v1.CreateIngredientResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.IngredientService.CreateIngredient is not implemented"))
}

func (UnimplementedIngredientServiceHandler) UpdateIngredient(context.Context, *connect_go.Request[v1.UpdateIngredientRequest]) (*connect_go.Response[v1.UpdateIngredientResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.IngredientService.UpdateIngredient is not implemented"))
}

func (UnimplementedIngredientServiceHandler) DeleteIngredient(context.Context, *connect_go.Request[v1.DeleteIngredientRequest]) (*connect_go.Response[v1.DeleteIngredientResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.IngredientService.DeleteIngredient is not implemented"))
}

// RecipeServiceClient is a client for the rpc.ingredientRain.v1.RecipeService service.
type RecipeServiceClient interface {
	GetRecipeList(context.Context, *connect_go.Request[v1.GetRecipeListRequest]) (*connect_go.Response[v1.GetRecipeListResponse], error)
	SearchRecipesByIngredients(context.Context, *connect_go.Request[v1.SearchRecipesByIngredientsRequest]) (*connect_go.Response[v1.SearchRecipesByIngredientResponse], error)
	CreateRecipesByBatch(context.Context, *connect_go.Request[v1.CreateRecipesByBatchRequest]) (*connect_go.Response[v1.CreateRecipesByBatchResponse], error)
	UpdateRecipe(context.Context, *connect_go.Request[v1.UpdateRecipeRequest]) (*connect_go.Response[v1.UpdateRecipeResponse], error)
	DeleteRecipe(context.Context, *connect_go.Request[v1.DeleteRecipeRequest]) (*connect_go.Response[v1.DeleteRecipeResponse], error)
}

// NewRecipeServiceClient constructs a client for the rpc.ingredientRain.v1.RecipeService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecipeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RecipeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &recipeServiceClient{
		getRecipeList: connect_go.NewClient[v1.GetRecipeListRequest, v1.GetRecipeListResponse](
			httpClient,
			baseURL+RecipeServiceGetRecipeListProcedure,
			opts...,
		),
		searchRecipesByIngredients: connect_go.NewClient[v1.SearchRecipesByIngredientsRequest, v1.SearchRecipesByIngredientResponse](
			httpClient,
			baseURL+RecipeServiceSearchRecipesByIngredientsProcedure,
			opts...,
		),
		createRecipesByBatch: connect_go.NewClient[v1.CreateRecipesByBatchRequest, v1.CreateRecipesByBatchResponse](
			httpClient,
			baseURL+RecipeServiceCreateRecipesByBatchProcedure,
			opts...,
		),
		updateRecipe: connect_go.NewClient[v1.UpdateRecipeRequest, v1.UpdateRecipeResponse](
			httpClient,
			baseURL+RecipeServiceUpdateRecipeProcedure,
			opts...,
		),
		deleteRecipe: connect_go.NewClient[v1.DeleteRecipeRequest, v1.DeleteRecipeResponse](
			httpClient,
			baseURL+RecipeServiceDeleteRecipeProcedure,
			opts...,
		),
	}
}

// recipeServiceClient implements RecipeServiceClient.
type recipeServiceClient struct {
	getRecipeList              *connect_go.Client[v1.GetRecipeListRequest, v1.GetRecipeListResponse]
	searchRecipesByIngredients *connect_go.Client[v1.SearchRecipesByIngredientsRequest, v1.SearchRecipesByIngredientResponse]
	createRecipesByBatch       *connect_go.Client[v1.CreateRecipesByBatchRequest, v1.CreateRecipesByBatchResponse]
	updateRecipe               *connect_go.Client[v1.UpdateRecipeRequest, v1.UpdateRecipeResponse]
	deleteRecipe               *connect_go.Client[v1.DeleteRecipeRequest, v1.DeleteRecipeResponse]
}

// GetRecipeList calls rpc.ingredientRain.v1.RecipeService.GetRecipeList.
func (c *recipeServiceClient) GetRecipeList(ctx context.Context, req *connect_go.Request[v1.GetRecipeListRequest]) (*connect_go.Response[v1.GetRecipeListResponse], error) {
	return c.getRecipeList.CallUnary(ctx, req)
}

// SearchRecipesByIngredients calls rpc.ingredientRain.v1.RecipeService.SearchRecipesByIngredients.
func (c *recipeServiceClient) SearchRecipesByIngredients(ctx context.Context, req *connect_go.Request[v1.SearchRecipesByIngredientsRequest]) (*connect_go.Response[v1.SearchRecipesByIngredientResponse], error) {
	return c.searchRecipesByIngredients.CallUnary(ctx, req)
}

// CreateRecipesByBatch calls rpc.ingredientRain.v1.RecipeService.CreateRecipesByBatch.
func (c *recipeServiceClient) CreateRecipesByBatch(ctx context.Context, req *connect_go.Request[v1.CreateRecipesByBatchRequest]) (*connect_go.Response[v1.CreateRecipesByBatchResponse], error) {
	return c.createRecipesByBatch.CallUnary(ctx, req)
}

// UpdateRecipe calls rpc.ingredientRain.v1.RecipeService.UpdateRecipe.
func (c *recipeServiceClient) UpdateRecipe(ctx context.Context, req *connect_go.Request[v1.UpdateRecipeRequest]) (*connect_go.Response[v1.UpdateRecipeResponse], error) {
	return c.updateRecipe.CallUnary(ctx, req)
}

// DeleteRecipe calls rpc.ingredientRain.v1.RecipeService.DeleteRecipe.
func (c *recipeServiceClient) DeleteRecipe(ctx context.Context, req *connect_go.Request[v1.DeleteRecipeRequest]) (*connect_go.Response[v1.DeleteRecipeResponse], error) {
	return c.deleteRecipe.CallUnary(ctx, req)
}

// RecipeServiceHandler is an implementation of the rpc.ingredientRain.v1.RecipeService service.
type RecipeServiceHandler interface {
	GetRecipeList(context.Context, *connect_go.Request[v1.GetRecipeListRequest]) (*connect_go.Response[v1.GetRecipeListResponse], error)
	SearchRecipesByIngredients(context.Context, *connect_go.Request[v1.SearchRecipesByIngredientsRequest]) (*connect_go.Response[v1.SearchRecipesByIngredientResponse], error)
	CreateRecipesByBatch(context.Context, *connect_go.Request[v1.CreateRecipesByBatchRequest]) (*connect_go.Response[v1.CreateRecipesByBatchResponse], error)
	UpdateRecipe(context.Context, *connect_go.Request[v1.UpdateRecipeRequest]) (*connect_go.Response[v1.UpdateRecipeResponse], error)
	DeleteRecipe(context.Context, *connect_go.Request[v1.DeleteRecipeRequest]) (*connect_go.Response[v1.DeleteRecipeResponse], error)
}

// NewRecipeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecipeServiceHandler(svc RecipeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(RecipeServiceGetRecipeListProcedure, connect_go.NewUnaryHandler(
		RecipeServiceGetRecipeListProcedure,
		svc.GetRecipeList,
		opts...,
	))
	mux.Handle(RecipeServiceSearchRecipesByIngredientsProcedure, connect_go.NewUnaryHandler(
		RecipeServiceSearchRecipesByIngredientsProcedure,
		svc.SearchRecipesByIngredients,
		opts...,
	))
	mux.Handle(RecipeServiceCreateRecipesByBatchProcedure, connect_go.NewUnaryHandler(
		RecipeServiceCreateRecipesByBatchProcedure,
		svc.CreateRecipesByBatch,
		opts...,
	))
	mux.Handle(RecipeServiceUpdateRecipeProcedure, connect_go.NewUnaryHandler(
		RecipeServiceUpdateRecipeProcedure,
		svc.UpdateRecipe,
		opts...,
	))
	mux.Handle(RecipeServiceDeleteRecipeProcedure, connect_go.NewUnaryHandler(
		RecipeServiceDeleteRecipeProcedure,
		svc.DeleteRecipe,
		opts...,
	))
	return "/rpc.ingredientRain.v1.RecipeService/", mux
}

// UnimplementedRecipeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecipeServiceHandler struct{}

func (UnimplementedRecipeServiceHandler) GetRecipeList(context.Context, *connect_go.Request[v1.GetRecipeListRequest]) (*connect_go.Response[v1.GetRecipeListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.RecipeService.GetRecipeList is not implemented"))
}

func (UnimplementedRecipeServiceHandler) SearchRecipesByIngredients(context.Context, *connect_go.Request[v1.SearchRecipesByIngredientsRequest]) (*connect_go.Response[v1.SearchRecipesByIngredientResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.RecipeService.SearchRecipesByIngredients is not implemented"))
}

func (UnimplementedRecipeServiceHandler) CreateRecipesByBatch(context.Context, *connect_go.Request[v1.CreateRecipesByBatchRequest]) (*connect_go.Response[v1.CreateRecipesByBatchResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.RecipeService.CreateRecipesByBatch is not implemented"))
}

func (UnimplementedRecipeServiceHandler) UpdateRecipe(context.Context, *connect_go.Request[v1.UpdateRecipeRequest]) (*connect_go.Response[v1.UpdateRecipeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.RecipeService.UpdateRecipe is not implemented"))
}

func (UnimplementedRecipeServiceHandler) DeleteRecipe(context.Context, *connect_go.Request[v1.DeleteRecipeRequest]) (*connect_go.Response[v1.DeleteRecipeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.ingredientRain.v1.RecipeService.DeleteRecipe is not implemented"))
}
